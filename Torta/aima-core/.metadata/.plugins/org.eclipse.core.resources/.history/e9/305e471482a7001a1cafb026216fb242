package it.coluccia.ialab2020.torta.project;

import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;

import aima.core.probability.Factor;
import aima.core.probability.RandomVariable;
import aima.core.probability.TimeRandomVariable;
import aima.core.probability.bayes.DynamicBayesianNetwork;
import aima.core.probability.bayes.Node;
import aima.core.probability.bayes.approx.ParticleFiltering;
import aima.core.probability.bayes.exact.EliminationAsk;
import aima.core.probability.bayes.impl.BayesNet;
import aima.core.probability.bayes.impl.DynamicBayesNet;
import aima.core.probability.bayes.impl.IalabDBN;
import aima.core.probability.domain.BooleanDomain;
import aima.core.probability.example.DynamicBayesNetExampleFactory;
import aima.core.probability.proposition.AssignmentProposition;
import aima.core.probability.util.ProbabilityTable;
import aima.core.probability.util.RandVar;

public class DynamicBNExercise {
	
	private static List<DynamicBayesianNetwork> networks;
	
	//queryVars[i] --> list of query vars for network i
	private static List<TimeRandomVariable[]> queryVars;
	
	//observations[i] --> list of array of observation for network experiment
	//observations[i][j] --> array of observation for experiment i at time j
	private static List<List<AssignmentProposition[]>> observations;
	
	public static void main(String[] args){
		generateNetworks();
		Iterator<TimeRandomVariable[]> queryIterator = queryVars.iterator();
		Iterator<List<AssignmentProposition[]>> obsIterator = observations.iterator();
		Iterator<DynamicBayesianNetwork> networkIterator = networks.iterator();
		
		EliminationAsk[] inferencesOrder = new EliminationAsk[]{
				new EliminationAsk(),
				new EliminationFill(),
				new EliminationMinDegree()
		};

		int experimentCounter = 0;
		
		//ogni ciclo è un esperimento
		while(networkIterator.hasNext()){
			System.out.println("********* EXPERIMENT "+experimentCounter+" *********");
			
			DynamicBayesianNetwork network = networkIterator.next();
			List<AssignmentProposition[]> observations = obsIterator.next();
			List<RandomVariable> queryVars = Arrays.asList(queryIterator.next());
			
			for(EliminationAsk inference : inferencesOrder){
				System.out.println("\tInference type: "+inference.getClass().getSimpleName());
				//creo IalabDBN
				Set<Node> rootNodes = ((BayesNet)network.getPriorNetwork()).getRootNodes();
				IalabDBN myNetwork = new IalabDBN(
													network.getPriorNetwork(), 
													network.getX_0_to_X_1(), 
													network.getE_1(), 
													rootNodes.toArray(new Node[rootNodes.size()]),
													(DynamicBayesNet)network);

				
				//eseguo algoritmo di VE
				long startTime = System.nanoTime();
				ProbabilityTable values = variableElimination(myNetwork,observations,inference,queryVars);
				long stopTime = System.nanoTime();
				
				//visualizzo risultati
				//double sum = 0;
				System.out.print("\t");
				Set<RandomVariable> varNames = values.getArgumentVariables();
				for(double value : values.getValues()){
					System.out.print(value+" | ");
					//sum+=value;
				}
				System.out.println();
				System.out.println("\tTIME: "+String.valueOf(stopTime-startTime)+" ns");
				//System.out.println(sum);

				
				//testo con particle filtering
				int N = 100;
				ParticleFiltering pf = new ParticleFiltering(N,network);
				AssignmentProposition[][] distApprox = null;
				
				//int time = 0;
				for(AssignmentProposition[] obsAssign : observations){
					distApprox = pf.particleFiltering(obsAssign);
		            /*System.out.println("Time " + time);
		            printSamples(distApprox, N);
		            time++;*/
				}
				//System.out.println("\tParticleFiltering (approx):");
				//printSamples(distApprox, N);
				
				Map<String,Float> particleRes = new HashMap<>();
				//float numberTrue = 0f;	
				for(AssignmentProposition[] val : distApprox){
					for(AssignmentProposition assignment : val){
						//AssignmentProposition assignment = val[val.length-1];
						RandomVariable currVar = assignment.getTermVariable();
						if(!queryVars.contains(currVar)){
							continue;
						}
						String key = "["+currVar+"]"+assignment.getValue().toString();
						Float num = particleRes.get(key);
						if(num == null){
							particleRes.put(key, 1f);
						}else{
							particleRes.put(key, num+1f);
						}
					}

					
				}
				System.out.println("\tParticleFiltering (approx): ");
				for(String key : particleRes.keySet()){
					System.out.println("\t\t"+key+": "+particleRes.get(key)/(float)N);
				}
				//System.out.println("\tParticleFiltering (approx): "+numberTrue/100f+" , "+(1f-(numberTrue/100f)));
				
				
				System.out.println("---------");	
			}
			experimentCounter++;
		}
	}
	
	/**
	 * It applies VE algorithm to specified dbn applying rollup filtering until it reaches final time step
	 * @param myNetwork
	 * @param observations
	 */
	private static ProbabilityTable variableElimination(IalabDBN myNetwork,List<AssignmentProposition[]> observations,EliminationAsk inference, List<RandomVariable> queryVars){
		//per ogni observation faccio uno step forward della mia network
		//Factor lastFactor = null;
		List<Factor> lastFactors = new LinkedList<>();
		int counter = 1;
		for(AssignmentProposition[] obs : observations){
			Set<Factor> factorList = new HashSet<Factor>(lastFactors);
			/*if(lastFactor != null){
				//factorList.add(lastFactor);
			}*/
			lastFactors = myNetwork.forward(obs,inference,factorList,queryVars);
			//lastFactor = EliminationAsk.getProbTableFromFactors(factors,queryVars);
			if(counter < observations.size()){
				for(Factor lastFactor : lastFactors){
					updateVariableReferenceToPreviousStep((ProbabilityTable)lastFactor,myNetwork.getCurrentSlice());				
				}	
			}
			counter++;
			
		}
		Factor lastFactor = EliminationAsk.getProbTableFromFactors(lastFactors,queryVars);
		return (ProbabilityTable)lastFactor;
		
	}
	
	private static void updateVariableReferenceToPreviousStep(ProbabilityTable lastFactor,DynamicBayesNet slice){
		Map<RandomVariable, RandomVariable> x1Toxo = slice.getX_1_to_X_0();
		Set<RandomVariable> origVariables = lastFactor.getArgumentVariables();
		Set<RandomVariable> updatedVariables = new HashSet<>();
		for(RandomVariable origVar : origVariables){
			updatedVariables.add(x1Toxo.get(origVar));
		}
		ProbabilityTable tmp = new ProbabilityTable(lastFactor.getValues(),updatedVariables.toArray(new RandomVariable[updatedVariables.size()]));
		lastFactor.setRandomVarInfo(tmp.getRandomVarInfo());
	}
	
	@Deprecated
    private static void printSamples(AssignmentProposition[][] S, int n) {
        Map<String,Integer> hm = new HashMap<String,Integer>();
        
        int nstates = S[0].length;
        
        for (int i = 0; i < n; i++) {
            String key = "";
            for (int j = 0; j < nstates; j++) {
                AssignmentProposition ap = S[i][j];
                key += ap.getValue().toString();
            }
            Integer val = hm.get(key);
            if (val == null) {
                hm.put(key, 1);
            } else {
                hm.put(key, val + 1);
            }
        }
        
        for (String key : hm.keySet()) {
            System.out.println("\t\t"+key + ": " + hm.get(key)/(double)n);
        }
    }

	
	/**
	 * It populates the Networks class variable with the DBN for the experiments
	 * It initializes also QueryVars class variable with the q
	 */
	private static void generateNetworks(){
		networks = new LinkedList<>();
		observations = new LinkedList<>();
		queryVars = new LinkedList<>(); 

		//****** EXPERIMENT 0 (umbrella) *******/
		networks.add(DynamicBayesNetExampleFactory.getUmbrellaWorldNetwork());
		
		TimeRandomVariable[] randVars = new TimeRandomVariable[]{
				new RandVar("Rain_t", new BooleanDomain())
		};
		queryVars.add(randVars);
		
		
		List<AssignmentProposition[]> observationDBN = new LinkedList<>();
		
		//step 1
		observationDBN.add(new AssignmentProposition[]{
				new AssignmentProposition(new RandVar("Umbrella_t", new BooleanDomain()), true )
		});
		
		//step 2
		observationDBN.add(new AssignmentProposition[]{
				new AssignmentProposition(new RandVar("Umbrella_t", new BooleanDomain()), true )
		});

		observations.add(observationDBN);
		
		//****** EXPERIMENT 1 (umbrella) *******/
		networks.add(DynamicBayesNetExampleFactory.getUmbrellaWorldNetwork());
		
		randVars = new TimeRandomVariable[]{
				new RandVar("Rain_t", new BooleanDomain())
		};
		queryVars.add(randVars);
		
		
		observationDBN = new LinkedList<>();
		
		//step 1
		observationDBN.add(new AssignmentProposition[]{
				new AssignmentProposition(new RandVar("Umbrella_t", new BooleanDomain()), false )
		});
		
		//step 2
		observationDBN.add(new AssignmentProposition[]{
				new AssignmentProposition(new RandVar("Umbrella_t", new BooleanDomain()), true )
		});
		
		//step 3
		observationDBN.add(new AssignmentProposition[]{
				new AssignmentProposition(new RandVar("Umbrella_t", new BooleanDomain()), true )
		});
		
		//step 4
		observationDBN.add(new AssignmentProposition[]{
				new AssignmentProposition(new RandVar("Umbrella_t", new BooleanDomain()), true )
		});
		
		//step 5
		observationDBN.add(new AssignmentProposition[]{
				new AssignmentProposition(new RandVar("Umbrella_t", new BooleanDomain()), false )
		});

		observations.add(observationDBN);
		
		//****** EXPERIMENT 2 (circuit) *******/
		networks.add(DynamicBayesNetExampleFactory.getDigitalCircuitNetExample());
		
		randVars = new TimeRandomVariable[]{
				new RandVar("Y", new BooleanDomain())
		};
		queryVars.add(randVars);
		
		
		observationDBN = new LinkedList<>();
		
		//step 1
		observationDBN.add(new AssignmentProposition[]{
				new AssignmentProposition(new RandVar("Z", new BooleanDomain()), true )
		});
		
		//step 2
		observationDBN.add(new AssignmentProposition[]{
				new AssignmentProposition(new RandVar("Z", new BooleanDomain()), false )
		});

		observations.add(observationDBN);
		
		//****** EXPERIMENT 3 (circuit) *******/
		networks.add(DynamicBayesNetExampleFactory.getDigitalCircuitNetExample());
		
		randVars = new TimeRandomVariable[]{
				new RandVar("I", new BooleanDomain())
		};
		queryVars.add(randVars);
		
		
		observationDBN = new LinkedList<>();
		
		//step 1
		observationDBN.add(new AssignmentProposition[]{
				new AssignmentProposition(new RandVar("Z", new BooleanDomain()), true )
		});
		
		//step 2
		observationDBN.add(new AssignmentProposition[]{
				new AssignmentProposition(new RandVar("Z", new BooleanDomain()), false )
		});
		
		//step 3
		observationDBN.add(new AssignmentProposition[]{
				new AssignmentProposition(new RandVar("Z", new BooleanDomain()), false )
		});
		
		//step 4
		observationDBN.add(new AssignmentProposition[]{
				new AssignmentProposition(new RandVar("Z", new BooleanDomain()), true )
		});
		
		//step 5
		observationDBN.add(new AssignmentProposition[]{
				new AssignmentProposition(new RandVar("Z", new BooleanDomain()), false )
		});
		
		//step 6
		observationDBN.add(new AssignmentProposition[]{
				new AssignmentProposition(new RandVar("Z", new BooleanDomain()), false )
		});
		
		//step 7
		observationDBN.add(new AssignmentProposition[]{
				new AssignmentProposition(new RandVar("Z", new BooleanDomain()), false )
		});
		
		//step 8
		observationDBN.add(new AssignmentProposition[]{
				new AssignmentProposition(new RandVar("Z", new BooleanDomain()), false )
		});
		
		//step 9
		observationDBN.add(new AssignmentProposition[]{
				new AssignmentProposition(new RandVar("Z", new BooleanDomain()), true )
		});

		observations.add(observationDBN);
		
		
		//****** EXPERIMENT 4 (asia) *******/
		networks.add(DynamicBayesNetExampleFactory.getAsiaNetwork());
		
		randVars = new TimeRandomVariable[]{
				new RandVar("Asia", new BooleanDomain())
		};
		queryVars.add(randVars);
		
		
		observationDBN = new LinkedList<>();
		
		//step 1
		observationDBN.add(new AssignmentProposition[]{
				new AssignmentProposition(new RandVar("Either", new BooleanDomain()), true ),
				new AssignmentProposition(new RandVar("Bronc", new BooleanDomain()), false )
		});
		
		//step 2
		observationDBN.add(new AssignmentProposition[]{
				new AssignmentProposition(new RandVar("Either", new BooleanDomain()), true ),
				new AssignmentProposition(new RandVar("Bronc", new BooleanDomain()), true )
		});

		observations.add(observationDBN);
		
		//****** EXPERIMENT 5 (umbrella WIND) *******/
		networks.add(DynamicBayesNetExampleFactory.getRainWindNet());
		
		randVars = new TimeRandomVariable[]{
				new RandVar("Rain_t", new BooleanDomain()),
				new RandVar("Wind_t", new BooleanDomain())
		};
		queryVars.add(randVars);
		
		
		observationDBN = new LinkedList<>();
		
		//step 1
		observationDBN.add(new AssignmentProposition[]{
				new AssignmentProposition(new RandVar("Umbrella_t", new BooleanDomain()), true )
		});
		
		//step 2
		observationDBN.add(new AssignmentProposition[]{
				new AssignmentProposition(new RandVar("Umbrella_t", new BooleanDomain()), true )
		});

		observations.add(observationDBN);
	}

}
