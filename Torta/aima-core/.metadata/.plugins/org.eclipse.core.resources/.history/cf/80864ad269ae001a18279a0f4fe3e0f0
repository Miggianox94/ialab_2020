package it.coluccia.ialab2020.torta.project;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import aima.core.probability.RandomVariable;
import aima.core.probability.bayes.Node;

/**
 * It represents the interaction graph used in MinFill and MinDegre order for VA algorithm
 * @author Miggianox94
 *
 */
public class InteractionGraph {

	// key: randomVar; values: set of randomvar linked
	private Map<RandomVariable,Set<RandomVariable>> graph;
	
	public InteractionGraph(Set<Node> nodes){
		this.graph = new HashMap<>();
		for(Node node : nodes){
			Set<RandomVariable> randVarOn = node.getCPD().getFor();
			Set<String> randVarOnNames = new HashSet<>();
			for(RandomVariable rndvar : randVarOn){
				randVarOnNames.add(rndvar.getName());
			}
			graph.put(node.getRandomVariable().getName(), randVarOnNames);
		}
	}
	
	private RandomVariable findNodeWithLessNeighbours(){
		RandomVariable lessNode = null;
		int minNumber = Integer.MAX_VALUE;
		for (RandomVariable var : graph) {
			if(notConsidered.contains(var)){
				continue;
			}
			Node node = nodes.get(var);
			int numberNeighbours = getNeighbours(node, notConsidered).size();
			if (numberNeighbours < minNumber) {
				minNumber = numberNeighbours;
				lessNode = var;
			}
		}

		return lessNode;
	}
	
}
