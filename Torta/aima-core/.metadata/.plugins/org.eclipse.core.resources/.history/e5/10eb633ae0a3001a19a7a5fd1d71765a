package it.coluccia.ialab2020.torta.project;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import aima.core.probability.CategoricalDistribution;
import aima.core.probability.RandomVariable;
import aima.core.probability.bayes.BayesianNetwork;
import aima.core.probability.bayes.Node;
import aima.core.probability.bayes.exact.EliminationAsk;
import aima.core.probability.bayes.impl.BayesNet;
import aima.core.probability.domain.ArbitraryTokenDomain;
import aima.core.probability.domain.BooleanDomain;
import aima.core.probability.proposition.AssignmentProposition;
import aima.core.probability.util.RandVar;
import it.coluccia.ialab2020.torta.bnparser.BifReader;

public class PruningAndOrder {
	
	private final static String[] NETWORKS_PATH = new String[]{
			"C:\\Workspaces\\ialab2020\\ialab_2020\\Torta\\aima-core\\aima-ialab\\networks\\cow.xml",
			"C:\\Workspaces\\ialab2020\\ialab_2020\\Torta\\aima-core\\aima-ialab\\networks\\survey.xml",
			"C:\\Workspaces\\ialab2020\\ialab_2020\\Torta\\aima-core\\aima-ialab\\networks\\alarm.xml",
			"C:\\Workspaces\\ialab2020\\ialab_2020\\Torta\\aima-core\\aima-ialab\\networks\\munin.xml",
			"C:\\Workspaces\\ialab2020\\ialab_2020\\Torta\\aima-core\\aima-ialab\\networks\\link.xml",
			"C:\\Workspaces\\ialab2020\\ialab_2020\\Torta\\aima-core\\aima-ialab\\networks\\win95pts.xml"
	};
	
	//in this way I can specify multiple experiments for a single network
	private final static List<RandomVariable[][]> QUERY_VARS = new ArrayList<>();
	private final static List<AssignmentProposition[][]> EVIDENCE_VARS = new ArrayList<>();
	
	private final static String RESULTS_PATH = "C:\\Workspaces\\ialab2020\\ialab_2020\\Torta\\aima-core\\aima-ialab\\results\\";

	private static String contentToAppend = "";
	
	public static void main(String[] args){
		
		//populate QUERY_VARS and EVIDENCE_VARS variables
		initializeQueryAndEvidenceExperiments();
		
		Iterator<RandomVariable[][]> queryIterator = QUERY_VARS.iterator();
		Iterator<AssignmentProposition[][]> evidenceIterator = EVIDENCE_VARS.iterator();
		
		for(String networkPath : NETWORKS_PATH){
			
			RandomVariable[][] queries = queryIterator.next();
			AssignmentProposition[][] evidences = evidenceIterator.next();
			contentToAppend = "";
			
			try{
				//variable elimination con ordine topologico inverso (default)
				CategoricalDistribution[] dists = variableElimination(queries,evidences,networkPath);
				System.out.println("\n@@@@@@@@@@@@@@@@@@@Distribution with inverse topological order:");
				for(CategoricalDistribution dist : dists){
					System.out.println("--> "+dist);
				}
				System.out.println("\n\n");
				
				EliminationAsk eliminationMinDegree = new EliminationMinDegree();
				EliminationAsk eliminationMinFill = new EliminationFill();
				
				//variable elimination con min degree
				dists = variableElimination(queries,evidences,networkPath,eliminationMinDegree);
				System.out.println("\n@@@@@@@@@@@@@@@@@@@Distribution with MinDegree order:");
				for(CategoricalDistribution dist : dists){
					System.out.println("--> "+dist);
				}
				System.out.println("\n\n");
				
				//variable elimination con min-fill
				dists = variableElimination(queries,evidences,networkPath,eliminationMinFill);
				System.out.println("\n@@@@@@@@@@@@@@@@@@@Distribution with MinFill order:");
				for(CategoricalDistribution dist : dists){
					System.out.println("--> "+dist);
				}
				System.out.println("\n\n");
			    Files.write(
			    	      Paths.get(RESULTS_PATH+"results_"+new Date().getTime()+"_"+networkPath.substring(networkPath.lastIndexOf("\\")+1)), 
			    	      contentToAppend.getBytes(), 
			    	      StandardOpenOption.CREATE);
			}catch(Exception e){
				System.out.println("Error during variable elimination algo, aborting!");
				e.printStackTrace();
			}
		}

	}
	
	/**
	 * populate QUERY_VARS and EVIDENCE_VARS variables
	 * with the query vars and evidence vars that I want to test for
	 * the experiment in position i
	 */
	private static void initializeQueryAndEvidenceExperiments(){
		//************* EXPERIMENT 0 cow.xml************//
		RandomVariable[][] randVars = new RandomVariable[][]{
			new RandomVariable[]{
					new RandVar("Pregnancy", new BooleanDomain())
			},
			new RandomVariable[]{
					new RandVar("Pregnancy", new BooleanDomain())
			}
		};
		QUERY_VARS.add(randVars);
		
		//P(Pregnancy|blood) e P(Pregnancy|blood,Scan=false)
		AssignmentProposition[][] assignmentVars = new AssignmentProposition[][]{
			new AssignmentProposition[]{
					new AssignmentProposition(new RandVar("Blood", new BooleanDomain()), true )
			},
			new AssignmentProposition[]{
					new AssignmentProposition(new RandVar("Blood", new BooleanDomain()), true ),
					new AssignmentProposition(new RandVar("Scan", new BooleanDomain()), false )
			}
		};
		EVIDENCE_VARS.add(assignmentVars);
		
		//************* EXPERIMENT 1 survey.xml************//
		/*
		 * 	Number of nodes: 6
			Number of arcs: 6
			Number of parameters: 21
			Average Markov blanket size: 2.67
			Average degree: 2.00
			Maximum in-degree: 2
		 */
		RandomVariable[][] randVars1 = new RandomVariable[][]{
			new RandomVariable[]{
					new RandVar("S", new ArbitraryTokenDomain("M","F"))
			},
			new RandomVariable[]{
					new RandVar("A", new ArbitraryTokenDomain("Young","Adult","Old"))
			}
		};
		QUERY_VARS.add(randVars1);
		
		
		AssignmentProposition[][] assignmentVars1 = new AssignmentProposition[][]{
			new AssignmentProposition[]{
					new AssignmentProposition(new RandVar("T", new ArbitraryTokenDomain("Car","Train","Other")), "Car" )
			},
			new AssignmentProposition[]{
					new AssignmentProposition(new RandVar("O", new ArbitraryTokenDomain("Emp","Self")), "Emp" )
			}
		};
		EVIDENCE_VARS.add(assignmentVars1);
		
		//************* EXPERIMENT 2 alarm.xml************//
		/*
		 * 	Number of nodes: 37
			Number of arcs: 46
			Number of parameters: 509
			Average Markov blanket size: 3.51
			Average degree: 2.49
			Maximum in-degree: 4
			
			1= variabili molto lontane
			2= variabili molto vicine
			3= variabili molto vicine multiple evidence
		 */
		RandomVariable[][] randVars2 = new RandomVariable[][]{
			new RandomVariable[]{
					new RandVar("SHUNT", new ArbitraryTokenDomain("NORMAL","HIGH")),
			},
			new RandomVariable[]{
					new RandVar("MINVOLSET", new ArbitraryTokenDomain("LOW","NORMAL","HIGH"))
			},
			new RandomVariable[]{
					new RandVar("MINVOLSET", new ArbitraryTokenDomain("LOW","NORMAL","HIGH"))
			}
		};
		QUERY_VARS.add(randVars2);
		
		AssignmentProposition[][] assignmentVars2 = new AssignmentProposition[][]{
			new AssignmentProposition[]{
					new AssignmentProposition(new RandVar("HR", new ArbitraryTokenDomain("LOW","NORMAL","HIGH")), "LOW" ),
			},
			new AssignmentProposition[]{
					new AssignmentProposition(new RandVar("VENTTUBE", new ArbitraryTokenDomain("ZERO","LOW","NORMAL","HIGH")), "LOW" )
			},
			new AssignmentProposition[]{
					new AssignmentProposition(new RandVar("VENTLUNG", new ArbitraryTokenDomain("ZERO","LOW","NORMAL","HIGH")), "ZERO" ),
					new AssignmentProposition(new RandVar("VENTTUBE", new ArbitraryTokenDomain("ZERO","LOW","NORMAL","HIGH")), "LOW" )
			}
		};
		EVIDENCE_VARS.add(assignmentVars2);
		
		//************* EXPERIMENT 3 munin.xml************//
		/*
		 * 	Number of nodes: 1041
			Number of arcs: 1397
			Number of parameters: 80592
			Average Markov blanket size: 3.54
			Average degree: 2.68
			Maximum in-degree: 3
		 */
		RandomVariable[][] randVars3 = new RandomVariable[][]{
			new RandomVariable[]{
					new RandVar("DIFFN_DISTR", new ArbitraryTokenDomain("DIST","PROX","RANDOM"))
			}
		};
		QUERY_VARS.add(randVars3);
		
		AssignmentProposition[][] assignmentVars3 = new AssignmentProposition[][]{
			new AssignmentProposition[]{
					new AssignmentProposition(new RandVar("DIFFN_M_SEV_DIST", new ArbitraryTokenDomain("NO","MILD","MOV","SED")), "NO" )
			}
		};
		EVIDENCE_VARS.add(assignmentVars3);
		
		//************* EXPERIMENT 4 link.xml************//
		/*
		 * 	Number of nodes: 724
			Number of arcs: 1125
			Number of parameters: 14211
			Average Markov blanket size: 4.80
			Average degree: 3.11
			Maximum in-degree: 3
		 */
		RandomVariable[][] randVars4 = new RandomVariable[][]{
			new RandomVariable[]{
					new RandVar("Z_2_a_f", new ArbitraryTokenDomain("F","M"))
			}
		};
		QUERY_VARS.add(randVars4);
		
		AssignmentProposition[][] assignmentVars4 = new AssignmentProposition[][]{
			new AssignmentProposition[]{
					new AssignmentProposition(new RandVar("D0_10_d_p", new ArbitraryTokenDomain("A","N")), "A" )
			}
		};
		EVIDENCE_VARS.add(assignmentVars4);
		
		//************* EXPERIMENT 5 win95pts.xml************//
		/*
		 * 	Number of nodes: 76
			Number of arcs: 112
			Number of parameters: 574
			Average Markov blanket size: 5.92
			Average degree: 2.95
			Maximum in-degree: 7
		 */
		RandomVariable[][] randVars5 = new RandomVariable[][]{
			new RandomVariable[]{
					new RandVar("PrtCbl", new ArbitraryTokenDomain("Connected","Loose"))
			}
		};
		QUERY_VARS.add(randVars5);
		
		AssignmentProposition[][] assignmentVars5 = new AssignmentProposition[][]{
			new AssignmentProposition[]{
					//new AssignmentProposition(new RandVar("Problem1", new ArbitraryTokenDomain("Normal_Output","No_Output")), "No_Output" )
					new AssignmentProposition(new RandVar("TnrSpply", new ArbitraryTokenDomain("Adequate","Low")), "Low" )
			}
		};
		EVIDENCE_VARS.add(assignmentVars5);
	}
	
	
	/**
	 * It generates a BayesNet object described by the specified file path
	 * @return
	 */
	private static BayesianNetwork  generateNetwork(String bayesFilePath){
		BayesianNetwork bn = BifReader.readBIF(bayesFilePath);
		return bn;
	}
	
	
	/**
	 * It prunes the network bn using theorem1 and theorem2 for nodes and it prunes also edges
	 * based on specified query and evidence
	 * @param bn
	 * @param queries
	 * @param evidences
	 * @return
	 */
	private static void pruneNetwork(BayesNet bn, RandomVariable[] queries, AssignmentProposition[] evidences){
		BayesNet network = (BayesNet)bn;
		
		Set<RandomVariable> ancestors = getAncestors(bn,queries,evidences);
		Set<RandomVariable> varsInNet = new HashSet<>(bn.getVarToNodeMap().keySet());
		for(RandomVariable varInNet : varsInNet){
			//theorem 1
			if(!ancestors.contains(varInNet)){
				System.out.println("Pruning var "+varInNet);
				//rimuovo la variabile dalla rete
				network.getRootNodes().remove(network.getNode(varInNet));
				network.getVarToNodeMap().remove(varInNet);
				network.getVariables().remove(varInNet);
			}
		}
		
		//theorem 2
		//get m-separated graph
		network.buildMSeparatedGraph();
		//remove irrilevant nodes
		network.removeMSeparatedNodes(queries, evidences);

		//pruning edges
		network.pruneEdges(evidences);
		
	}
	
	
	/**
	 * Return ancestors(queries) + ancestors(evidences) + queries and evidences random variables
	 * @param bn
	 * @param queries
	 * @param evidences
	 * @return
	 */
	private static Set<RandomVariable> getAncestors(BayesNet bn, RandomVariable[] queries, AssignmentProposition[] evidences){
		Set<RandomVariable> toReturn = new HashSet<>();
		toReturn.addAll(Arrays.asList(queries));
		for(RandomVariable query : queries){
			for(Node parent : bn.getNode(query).getParents()){
				toReturn.add(parent.getRandomVariable());
				toReturn.addAll(getAncestors(bn,new RandomVariable[]{parent.getRandomVariable()}, new AssignmentProposition[]{}));
			}
		}
		
		Set<RandomVariable> evidencesVars = new HashSet<>();
		for(AssignmentProposition evidence : evidences){
			evidencesVars.add(evidence.getTermVariable());
			if(bn.getNode(evidence.getTermVariable()) == null){
				System.err.println("ATTENTION! "+evidence.getTermVariable()+" node not found");
				continue;
			}
			for(Node parent : bn.getNode(evidence.getTermVariable()).getParents()){
				evidencesVars.add(parent.getRandomVariable());
				toReturn.addAll(getAncestors(bn,new RandomVariable[]{parent.getRandomVariable()}, new AssignmentProposition[]{}));
			}
		}
		toReturn.addAll(evidencesVars);
		
		return toReturn;

	}
	
	
	/**
	 * It executes the variableElimination algorithm for queryVars and evidenceVars on bn network using 
	 * the variables order specified by eliminationType
	 * It prints performance results on a dedicated file
	 * @param queryVars
	 * @param evidenceVars
	 * @param bn
	 * @param eliminationType
	 * @return
	 * @throws IOException 
	 */
	private static CategoricalDistribution[] variableElimination(RandomVariable[][] queryVars, AssignmentProposition[][] evidenceVars, String bnPath, EliminationAsk eliminationType) throws IOException{
		CategoricalDistribution[] result = new CategoricalDistribution[queryVars.length];
		contentToAppend += "\n!!\n";
		for(int index = 0; index < queryVars.length; index++){
			System.out.println("===============================");
			System.out.println("=== NET: "+bnPath);
			System.out.println("====== QUERY: ");
			for(int index2=0; index2 < queryVars[index].length; index2++){
				System.out.println("********* "+queryVars[index][index2].getName());
			}
			System.out.println("====== EVIDENCE: ");
			for(int index2=0; index2 < evidenceVars[index].length; index2++){
				System.out.println("********* "+evidenceVars[index][index2].getTermVariable().getName()+":"+evidenceVars[index][index2].getValue());
			}
			System.out.println("===============================");
			
			//genero network
			BayesianNetwork network = generateNetwork(bnPath);
			BayesNet bn = (BayesNet)network;

			//effettuo pruning della rete usando teorema1, teorema2 e pruning archi
			pruneNetwork(bn,queryVars[index],evidenceVars[index]);
			
			long startTime = System.nanoTime();
			CategoricalDistribution dist = eliminationType.ask(queryVars[index],evidenceVars[index], bn);
			long stopTime = System.nanoTime();
			result[index] = dist;
			contentToAppend += "<"+eliminationType.getClass().getSimpleName()+">\n";
			contentToAppend += "#"+String.valueOf(stopTime-startTime)+"\n";
		}
		contentToAppend += "^^";
		
		return result;
	}
	
	private static CategoricalDistribution[] variableElimination(RandomVariable[][] queryVars, AssignmentProposition[][] evidenceVars, String bnPath) throws IOException{
		return variableElimination(queryVars,evidenceVars,bnPath,new EliminationAsk());
	}

}
