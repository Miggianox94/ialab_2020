package aima.core.probability.bayes.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

import aima.core.probability.Factor;
import aima.core.probability.RandomVariable;
import aima.core.probability.bayes.BayesianNetwork;
import aima.core.probability.bayes.ConditionalProbabilityTable;
import aima.core.probability.bayes.Node;
import aima.core.probability.proposition.AssignmentProposition;

/**
 * Default implementation of the BayesianNetwork interface.
 * 
 * @author Ciaran O'Reilly
 * @author Ravi Mohan
 */
public class BayesNet implements BayesianNetwork {
	protected Set<Node> rootNodes = new LinkedHashSet<Node>();
	public List<RandomVariable> variables = new ArrayList<RandomVariable>();
	
	//it is populated by buildMSeparated method
	private Set<Tuple<Node,Node>> marriedNodes;

	//ho messo i getter sotto perchè devo navigare il grafo per mindegree e minfill
	protected Map<RandomVariable, Node> varToNodeMap = new HashMap<RandomVariable, Node>();

	public BayesNet(Node... rootNodes) {
		if (null == rootNodes) {
			throw new IllegalArgumentException(
					"Root Nodes need to be specified.");
		}
		for (Node n : rootNodes) {
			this.rootNodes.add(n);
		}
		if (this.rootNodes.size() != rootNodes.length) {
			throw new IllegalArgumentException(
					"Duplicate Root Nodes Passed in.");
		}
		// Ensure is a DAG
		checkIsDAGAndCollectVariablesInTopologicalOrder();
		//variables = Collections.unmodifiableList(variables);
		this.marriedNodes = new HashSet<>();
	}
	
	public BayesNet(List<Node> rootNodes) {
		if (null == rootNodes) {
			throw new IllegalArgumentException(
					"Root Nodes need to be specified.");
		}
		for (Node n : rootNodes) {
			this.rootNodes.add(n);
		}
		if (this.rootNodes.size() != rootNodes.size()) {
			throw new IllegalArgumentException(
					"Duplicate Root Nodes Passed in.");
		}
		// Ensure is a DAG
		checkIsDAGAndCollectVariablesInTopologicalOrder();
		//variables = Collections.unmodifiableList(variables);
	}
	
	
	

	public Set<Tuple<Node, Node>> getMarriedNodes() {
		return marriedNodes;
	}
	
	/**
	 * It returns the node neighbours not considering the nodes in notConsidered
	 * list and considering marriedNodes Set
	 * 
	 * @param node
	 * @param notConsidered
	 * @return
	 */
	private Set<Node> getNeighbours(Node node, List<RandomVariable> notConsidered) {
		Set<Node> neighbours = new HashSet<>(node.getChildren());
		neighbours.addAll(node.getParents());
		for(Tuple<Node,Node> t : marriedNodes){
			if(t.x.equals(node)){
				neighbours.add(t.y);
			}
			if(t.y.equals(node)){
				neighbours.add(t.x);
			}
		}

		Set<Node> filtered = neighbours.stream().filter(c -> !notConsidered.contains(c.getRandomVariable()))
				.collect(Collectors.toSet());

		return filtered;

	}


	/**
	 * It builds an m-separated graph marring all parents with a common child
	 */
	public void buildMSeparatedGraph(){
		for(Node node : varToNodeMap.values()){
			Set<Node> parents = node.getParents();
			//collego tutte le coppie di genitori
			for(Node parent1 : parents){
				for(Node parent2 : parents){
					if(parent1.equals(parent2)){
						continue;
					}
					//se è già stato inserito verrà skippato in quanto è un set
					this.marriedNodes.add(new Tuple<>(parent1,parent2));
					
				}
			}
		}
	}
	
	/**
	 * It prune nodes applying theorem 2 (m-separation)
	 * @param queries
	 * @param evidences
	 */
	public void removeMSeparatedNodes(RandomVariable[] queries, AssignmentProposition[] evidences){
		Set<RandomVariable> bnVARS = new HashSet<>();
		Set<RandomVariable> hidden = new HashSet<>();
		bnVARS.addAll(getVariablesInTopologicalOrder());
		hidden.addAll(bnVARS);

		for (RandomVariable x : queries) {
			hidden.remove(x);
		}
		for (AssignmentProposition ap : evidences) {
			hidden.removeAll(ap.getScope());
		}
		
		//here I have hidden collection correctly populated
		
		Set<RandomVariable> evidenceRandomVars = new HashSet<>();
		for(AssignmentProposition ap : evidences){
			evidenceRandomVars.add(ap.getTermVariable());
		}
		
		Set<RandomVariable> queriesRandomVars = new HashSet<>();
		for(RandomVariable ap : queries){
			queriesRandomVars.add(ap);
		}

		for(RandomVariable varInNet : hidden){
			if(!canReachQueryWithoutEvidence(varInNet,queriesRandomVars,evidenceRandomVars)){
				System.out.println("Pruning(m-separation) var "+varInNet);
				//rimuovo la variabile dalla rete
				rootNodes.remove(getNode(varInNet));
				varToNodeMap.remove(varInNet);
				variables.remove(varInNet);
			}
		}
	}
	
	/**
	 * It returns true iff hiddenVar can reach all queries vars excluding evidences from these paths
	 * @param hiddenVar
	 * @param queries
	 * @param evidences
	 * @return
	 */
	private boolean canReachQueryWithoutEvidence(RandomVariable hiddenVar,Set<RandomVariable> queries, Set<RandomVariable> evidences){
		Node hiddenNode = getNode(hiddenVar);
		
		List<Node> toVisit = new ArrayList<>();
		toVisit.add(hiddenNode);
		Set<Node> visited = new HashSet<>();
		while(!toVisit.isEmpty()){
			Node nod = toVisit.remove(0);
			if(!visited.contains(nod)){
				visited.add(nod);
				Set<Node> neighbours = getNeighbours(nod, new ArrayList<>(evidences));
				neighbours = neighbours.stream().filter(c -> variables.contains(c.getRandomVariable())).collect(Collectors.toSet());
				toVisit.addAll(neighbours);
			}
		}
		
		Set<Node> queriesNodes = new HashSet<>();
		for(RandomVariable quer : queries){
			queriesNodes.add(getNode(quer));
		}
		
		if(visited.containsAll(queriesNodes)){
			return true;
		}
		return false;
		
	}
	
	/**
	 * It prune irrelevant edges from network
	 * @param evidences
	 */
	public void pruneEdges(AssignmentProposition[] evidences){
		List<Node> evidenceNodes = new ArrayList<>();
		for(AssignmentProposition evidence : evidences){
			evidenceNodes.add(getNode(evidence.getTermVariable()));
		}

		for(AssignmentProposition evidence : evidences){
			Node evidenceNode = getNode(evidence.getTermVariable());
			if(evidenceNode == null){
				System.err.println("ATTENTION! "+evidence.getTermVariable()+ "NODE IS NULL!");
			}
			for(Node child : evidenceNode.getChildren()){
				//controllo che non sia già stato pruned o che sia esso stesso una evidence
				if(!variables.contains(child.getRandomVariable()) || evidenceNodes.contains(child)){
					continue;
				}
				//ricalcolo CPT
				FullCPTNode fullChild = (FullCPTNode)child;
				ConditionalProbabilityTable cpt = fullChild.getCPT();
				Factor factor = cpt.getFactorFor(evidences);
				child.updateCPT(child.getRandomVariable(),evidence.getTermVariable(), factor.getValues());
				System.out.println("Updated CPT for variable "+child.getRandomVariable().getName());
			}
			//rimuovo gli archi verso i figli
			evidenceNode.setChildren(new HashSet<>());
		}
	}
	

	public Map<RandomVariable, Node> getVarToNodeMap() {
		return varToNodeMap;
	}




	public List<RandomVariable> getVariables() {
		return variables;
	}

	public void setVariables(List<RandomVariable> variables) {
		this.variables = variables;
	}

	//
	// START-BayesianNetwork
	@Override
	public List<RandomVariable> getVariablesInTopologicalOrder() {
		return variables;
	}

	@Override
	public Node getNode(RandomVariable rv) {
		return varToNodeMap.get(rv);
	}
	
	

	// END-BayesianNetwork
	//

	public Set<Node> getRootNodes() {
		return rootNodes;
	}



	public void setRootNodes(Set<Node> rootNodes) {
		this.rootNodes = rootNodes;
	}



	//
	// PRIVATE METHODS
	//
	private void checkIsDAGAndCollectVariablesInTopologicalOrder() {

		// Topological sort based on logic described at:
		// http://en.wikipedia.org/wiki/Topoligical_sorting
		Set<Node> seenAlready = new HashSet<Node>();
		Map<Node, List<Node>> incomingEdges = new HashMap<Node, List<Node>>();
		Set<Node> s = new LinkedHashSet<Node>();
		for (Node n : this.rootNodes) {
			walkNode(n, seenAlready, incomingEdges, s);
		}
		while (!s.isEmpty()) {
			Node n = s.iterator().next();
			s.remove(n);
			variables.add(n.getRandomVariable());
			varToNodeMap.put(n.getRandomVariable(), n);
			for (Node m : n.getChildren()) {
				List<Node> edges = incomingEdges.get(m);
				edges.remove(n);
				if (edges.isEmpty()) {
					s.add(m);
				}
			}
		}

		for (List<Node> edges : incomingEdges.values()) {
			if (!edges.isEmpty()) {
				throw new IllegalArgumentException(
						"Network contains at least one cycle in it, must be a DAG.");
			}
		}
	}

	private void walkNode(Node n, Set<Node> seenAlready,
			Map<Node, List<Node>> incomingEdges, Set<Node> rootNodes) {
		if (!seenAlready.contains(n)) {
			seenAlready.add(n);
			// Check if has no incoming edges
			if (n.isRoot()) {
				rootNodes.add(n);
			}
			incomingEdges.put(n, new ArrayList<Node>(n.getParents()));
			for (Node c : n.getChildren()) {
				walkNode(c, seenAlready, incomingEdges, rootNodes);
			}
		}
	}
}
