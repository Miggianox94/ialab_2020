package aima.core.probability.example;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import aima.core.probability.RandomVariable;
import aima.core.probability.bayes.DynamicBayesianNetwork;
import aima.core.probability.bayes.FiniteNode;
import aima.core.probability.bayes.impl.BayesNet;
import aima.core.probability.bayes.impl.DynamicBayesNet;
import aima.core.probability.bayes.impl.FullCPTNode;
import aima.core.probability.domain.BooleanDomain;
import aima.core.probability.util.RandVar;

/**
 * 
 * @author Ciaran O'Reilly
 *
 */
public class DynamicBayesNetExampleFactory {
	/**
	 * Return a Dynamic Bayesian Network of the Umbrella World Network.
	 * 
	 * @return a Dynamic Bayesian Network of the Umbrella World Network.
	 */
	public static DynamicBayesianNetwork getUmbrellaWorldNetwork() {
		FiniteNode prior_rain_tm1 = new FullCPTNode(ExampleRV.RAIN_tm1_RV,
				new double[] { 0.5, 0.5 });

		BayesNet priorNetwork = new BayesNet(prior_rain_tm1);

		// Prior belief state
		FiniteNode rain_tm1 = new FullCPTNode(ExampleRV.RAIN_tm1_RV,
				new double[] { 0.5, 0.5 });
		// Transition Model
		FiniteNode rain_t = new FullCPTNode(ExampleRV.RAIN_t_RV, new double[] {
				// R_t-1 = true, R_t = true
				0.7,
				// R_t-1 = true, R_t = false
				0.3,
				// R_t-1 = false, R_t = true
				0.3,
				// R_t-1 = false, R_t = false
				0.7 }, rain_tm1);
		// Sensor Model
		@SuppressWarnings("unused")
		FiniteNode umbrealla_t = new FullCPTNode(ExampleRV.UMBREALLA_t_RV,
				new double[] {
						// R_t = true, U_t = true
						0.9,
						// R_t = true, U_t = false
						0.1,
						// R_t = false, U_t = true
						0.2,
						// R_t = false, U_t = false
						0.8 }, rain_t);

		Map<RandomVariable, RandomVariable> X_0_to_X_1 = new HashMap<RandomVariable, RandomVariable>();
		X_0_to_X_1.put(ExampleRV.RAIN_tm1_RV, ExampleRV.RAIN_t_RV);
		Set<RandomVariable> E_1 = new HashSet<RandomVariable>();
		E_1.add(ExampleRV.UMBREALLA_t_RV);

		return new DynamicBayesNet(priorNetwork, X_0_to_X_1, E_1, rain_tm1);
	}
	
	
	@SuppressWarnings("unused")
	public static DynamicBayesianNetwork getDigitalCircuitNetExample() {
        /**
         * Number of nodes: 6
         * Number of arcs: 6
         */
		
		FiniteNode prior_J = new FullCPTNode(new RandVar("J_t-1", new BooleanDomain()),new double[] { 0.5, 0.5 });
		FiniteNode prior_I = new FullCPTNode(new RandVar("I_t-1", new BooleanDomain()),new double[] { 0.5, 0.5 });
		FiniteNode prior_Y = new FullCPTNode(new RandVar("Y_t-1", new BooleanDomain()),new double[] { 0.3, 0.7 });

		BayesNet priorNetwork = new BayesNet(prior_J,prior_I,prior_Y);

        /**
         * [RandomVariable]s declaration
         */
		RandVar jm1 = new RandVar("J_t-1", new BooleanDomain());
		RandVar im1 = new RandVar("I_t-1", new BooleanDomain());
		RandVar ym1 = new RandVar("Y_t-1", new BooleanDomain());
		RandVar j = new RandVar("J", new BooleanDomain());
		RandVar i = new RandVar("I", new BooleanDomain());
		RandVar y = new RandVar("Y", new BooleanDomain());
		RandVar z = new RandVar("Z", new BooleanDomain());

        /**
         * [FullCPTNode]s declaration
         */
		// Prior belief state
		FiniteNode node_J_tm1 = new FullCPTNode(jm1,new double[] { 0.5, 0.5 });
		FiniteNode node_I_tm1 = new FullCPTNode(im1,new double[] { 0.5, 0.5 });
		FiniteNode node_Y_tm1 = new FullCPTNode(ym1,new double[] { 0.3, 0.7 });
		
		// Transition Model
		FiniteNode node_J_t = new FullCPTNode(j,new double[] { 0.95, 0.05, 0.05, 0.95, 0.05, 0.95, 0.05, 0.95 },node_J_tm1,node_I_tm1);
		FiniteNode node_I_t = new FullCPTNode(i,new double[] { 0.98, 0.02, 0.98, 0.02, 0.98, 0.02, 0.02, 0.98 },node_J_tm1,node_Y_tm1);
		FiniteNode node_Y_t = new FullCPTNode(y,new double[] { 0.98, 0.02, 0.98, 0.02 },node_Y_tm1);
		
		// Sensor Model
		FiniteNode node_Z_t = new FullCPTNode(z,new double[] { 0.95, 0.05, 0.05, 0.95, 0.05, 0.95, 0.05, 0.95 },node_J_t,node_I_t);
		
		//specifico le equivalenze tra i nodi di t-1 e t
		Map<RandomVariable, RandomVariable> X_0_to_X_1 = new HashMap<RandomVariable, RandomVariable>();
		X_0_to_X_1.put(jm1, j);
		//X_0_to_X_1.put(jm1, i);
		X_0_to_X_1.put(im1, i);
		//X_0_to_X_1.put(ym1, i);
		X_0_to_X_1.put(ym1, y);
		Set<RandomVariable> E_1 = new HashSet<RandomVariable>();
		E_1.add(z);

		return new DynamicBayesNet(priorNetwork, X_0_to_X_1, E_1, node_J_tm1, node_I_tm1,node_Y_tm1);

    }
	
	@SuppressWarnings("unused")
	public static DynamicBayesianNetwork getAsiaNetwork() {
		FiniteNode prior_asia = new FullCPTNode(new RandVar("Asia_t-1", new BooleanDomain()),new double[] { 0.8, 0.2 });
		FiniteNode prior_smoke = new FullCPTNode(new RandVar("Smoke_t-1", new BooleanDomain()),new double[] { 0.5, 0.5 });
		FiniteNode prior_tub = new FullCPTNode(new RandVar("Tub_t-1", new BooleanDomain()),new double[] { 0.1, 0.9 });
		FiniteNode prior_lung = new FullCPTNode(new RandVar("Lung_t-1", new BooleanDomain()),new double[] { 0.6, 0.4 });

		BayesNet priorNetwork = new BayesNet(prior_asia,prior_smoke,prior_tub,prior_lung);
		
        /**
         * [RandomVariable]s declaration
         */
		RandVar asia_m1 = new RandVar("Asia_t-1", new BooleanDomain());
		RandVar smoke_m1 = new RandVar("Smoke_t-1", new BooleanDomain());
		RandVar tub_m1 = new RandVar("Tub_t-1", new BooleanDomain());
		RandVar lung_m1 = new RandVar("Lung_t-1", new BooleanDomain());
		RandVar asia = new RandVar("Asia", new BooleanDomain());
		RandVar smoke = new RandVar("Smoke", new BooleanDomain());
		RandVar tub = new RandVar("Tub", new BooleanDomain());
		RandVar lung = new RandVar("Lung", new BooleanDomain());
		
		RandVar either = new RandVar("Either", new BooleanDomain());
		RandVar bronc = new RandVar("Bronc", new BooleanDomain());
		RandVar xray = new RandVar("Xray", new BooleanDomain());
		RandVar dysp = new RandVar("Dysp", new BooleanDomain());
		
		
        /**
         * [FullCPTNode]s declaration
         */
		// Prior belief state
		FiniteNode node_asia_m1 = new FullCPTNode(asia_m1,new double[] { 0.8, 0.2 });
		FiniteNode node_smoke_m1 = new FullCPTNode(smoke_m1,new double[] { 0.5, 0.5 });
		FiniteNode node_tub_m1 = new FullCPTNode(tub_m1,new double[] { 0.1, 0.9 },node_asia_m1);
		FiniteNode node_lung_m1 = new FullCPTNode(lung_m1,new double[] { 0.6, 0.4 }, node_smoke_m1);
		
		
		// Transition Model
		FiniteNode node_asia_t = new FullCPTNode(asia_m1,new double[] { 0.95, 0.05, 0.05, 0.95 },node_smoke_m1);
		FiniteNode node_smoke_t = new FullCPTNode(smoke_m1,new double[] { 0.98, 0.02, 0.98, 0.02, 0.98, 0.02, 0.02, 0.98 },node_asia_m1,node_smoke_m1);
		FiniteNode node_tub_t = new FullCPTNode(tub_m1,new double[] { 0.98, 0.02, 0.98, 0.02 },node_lung_m1);
		FiniteNode node_lung_t = new FullCPTNode(tub_m1,new double[] { 0.6, 0.4});

		// Sensor Model
		FiniteNode node_either_t = new FullCPTNode(z,new double[] { 0.95, 0.05, 0.05, 0.95, 0.05, 0.95, 0.05, 0.95 },node_tub_t,node_lung_t);
		
		//specifico le equivalenze tra i nodi di t-1 e t
		Map<RandomVariable, RandomVariable> X_0_to_X_1 = new HashMap<RandomVariable, RandomVariable>();
		X_0_to_X_1.put(jm1, j);
		//X_0_to_X_1.put(jm1, i);
		X_0_to_X_1.put(im1, i);
		//X_0_to_X_1.put(ym1, i);
		X_0_to_X_1.put(ym1, y);
		Set<RandomVariable> E_1 = new HashSet<RandomVariable>();
		E_1.add(z);

		return new DynamicBayesNet(priorNetwork, X_0_to_X_1, E_1, node_J_tm1, node_I_tm1,node_Y_tm1);
	}
}
